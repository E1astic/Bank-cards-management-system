openapi: 3.1.0
info:
  title: Bank Cards API
  description: "API для управления банковскими картами, денежными переводами и пол\
    ьзователями"
  version: v1.0
servers:
  - url: http://localhost:8075/bank-cards
    description: Generated server url
security:
  - Bearer Authentication: []
tags:
  - name: CardAdminController
    description: Контроллер для управления картами администратором
  - name: UserController
    description: Контроллер для управления пользователями администратором
  - name: TransactionController
    description: Контроллер для совершения денежных переводов между картами
  - name: AuthController
    description: Контроллер для регистрации и логина пользователей
  - name: PersonalCardController
    description: Контроллер для управления персональными картами каждым пользователем
paths:
  /user/{id}/update:
    put:
      tags:
        - UserController
      summary: Обновление данных пользователя
      operationId: updateUserInfo
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDataChangeRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SimpleResponseBody"
  /transaction/create:
    post:
      tags:
        - TransactionController
      summary: Совершение денежного перевода на указанную сумму между своими двумя
        картами
      operationId: createTransaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SimpleResponseBody"
  /card/register:
    post:
      tags:
        - CardAdminController
      summary: Создание новой карты для пользователя
      operationId: registerCard
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardRegisterRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardRegisterResponse"
  /card/my/{id}/block:
    post:
      tags:
        - PersonalCardController
      summary: Создание запроса на блокировку карты с переданным ID
      operationId: createCardBlockingRequest
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SimpleResponseBody"
  /auth/register:
    post:
      tags:
        - AuthController
      summary: Регистрация пользователя
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegisterRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SimpleResponseBody"
  /auth/login:
    post:
      tags:
        - AuthController
      summary: Вход пользователя в систему
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLoginRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserLoginResponse"
  /card/{id}/status/{status}:
    patch:
      tags:
        - CardAdminController
      summary: "Изменение статуса карты по ID (активация, блокировка, истечение ср\
        ока действия)"
      operationId: updateCardStatus
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: status
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SimpleResponseBody"
  /card/expired/{expirationDate}/check:
    patch:
      tags:
        - CardAdminController
      summary: "Автоматическая установка статуса EXPIRED для всех карт, срок котор\
        ых истекает в указанный прошедший или текущий день"
      operationId: checkExpiredCard
      parameters:
        - name: expirationDate
          in: path
          required: true
          schema:
            type: string
            format: date
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SimpleResponseBody"
  /card/expired/today/check:
    patch:
      tags:
        - CardAdminController
      summary: "Автоматическая установка статуса EXPIRED для всех карт, срок котор\
        ых истекает в текущий день"
      operationId: checkTodayExpiredCard
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SimpleResponseBody"
  /card/{id}:
    get:
      tags:
        - CardAdminController
      summary: Получение карты по ID
      operationId: getCardById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fullNumber
          in: query
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardAdminDto"
  /card/request/block:
    get:
      tags:
        - CardAdminController
      summary: Получение всех заявок пользователей на блокировку карты
      operationId: getCardBlockingRequests
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CardBlockingResponseDto"
  /card/my:
    get:
      tags:
        - PersonalCardController
      summary: Получение всех карт текущего пользователя с возможностью постраничной
        выдачи
      operationId: getAllPersonalCards
      parameters:
        - name: fullNumber
          in: query
          required: false
          schema:
            type: boolean
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
            minimum: 0
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CardUserDto"
  /card/my/{id}:
    get:
      tags:
        - PersonalCardController
      summary: Получение карты пользователя по ID
      operationId: getPersonalCardById
      parameters:
        - name: fullNumber
          in: query
          required: false
          schema:
            type: boolean
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardUserDto"
  /card/my/{id}/balance:
    get:
      tags:
        - PersonalCardController
      summary: Получение баланса карты пользователя по ID
      operationId: getPersonalCardBalance
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BalanceResponseDto"
  /card/my/balance:
    get:
      tags:
        - PersonalCardController
      summary: Получение суммарного баланса всех активированных карт пользователя
      operationId: getPersonalCardsTotalBalance
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BalanceResponseDto"
  /card/all:
    get:
      tags:
        - CardAdminController
      summary: Получение всех карт с возможностью постраничной выдачи
      operationId: getAllCards
      parameters:
        - name: fullNumber
          in: query
          required: false
          schema:
            type: boolean
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
            minimum: 0
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CardAdminDto"
  /user/{id}/del:
    delete:
      tags:
        - UserController
      summary: Удаление пользователя
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SimpleResponseBody"
  /card/{id}/del:
    delete:
      tags:
        - CardAdminController
      summary: Удаление карты по ID
      operationId: deleteCardById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SimpleResponseBody"
components:
  schemas:
    UserDataChangeRequest:
      type: object
      properties:
        password:
          type: string
          maxLength: 100
          minLength: 8
        phone:
          type: string
          minLength: 1
          pattern: "^\\+?[0-9]{11,12}$"
        surname:
          type: string
          maxLength: 60
          minLength: 2
        name:
          type: string
          maxLength: 60
          minLength: 2
        patronymic:
          type: string
          maxLength: 60
          minLength: 2
      required:
        - name
        - password
        - patronymic
        - phone
        - surname
    SimpleResponseBody:
      type: object
      properties:
        message:
          type: string
    TransactionDto:
      type: object
      properties:
        senderCardId:
          type: integer
          format: int64
        receivedCardId:
          type: integer
          format: int64
        amount:
          type: number
          maximum: 500000
          minimum: 1
      required:
        - amount
        - receivedCardId
        - senderCardId
    CardRegisterRequest:
      type: object
      properties:
        expirationYears:
          type: integer
          format: int32
          maximum: 10
          minimum: 1
        ownerId:
          type: integer
          format: int64
      required:
        - expirationYears
        - ownerId
    CardRegisterResponse:
      type: object
      properties:
        cardId:
          type: integer
          format: int64
    UserRegisterRequest:
      type: object
      properties:
        email:
          type: string
          maxLength: 60
          minLength: 0
        password:
          type: string
          maxLength: 100
          minLength: 8
        phone:
          type: string
          minLength: 1
          pattern: "^\\+?[0-9]{11,12}$"
        surname:
          type: string
          maxLength: 60
          minLength: 2
        name:
          type: string
          maxLength: 60
          minLength: 2
        patronymic:
          type: string
          maxLength: 60
          minLength: 2
      required:
        - email
        - name
        - password
        - patronymic
        - phone
        - surname
    UserLoginRequest:
      type: object
      properties:
        email:
          type: string
          maxLength: 60
          minLength: 0
        password:
          type: string
          maxLength: 100
          minLength: 8
      required:
        - email
        - password
    UserLoginResponse:
      type: object
      properties:
        jwt:
          type: string
    CardAdminDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        number:
          type: string
        activationDate:
          type: string
          format: date
        expirationDate:
          type: string
          format: date
        status:
          type: string
          enum:
            - ACTIVE
            - BLOCKED
            - EXPIRED
        ownerId:
          type: integer
          format: int64
        balance:
          type: number
    CardBlockingResponseDto:
      type: object
      properties:
        cardId:
          type: integer
          format: int64
        status:
          type: string
          enum:
            - COMPLETED
            - NOT_COMPLETED
        timestamp:
          type: string
          format: date-time
    CardUserDto:
      type: object
      properties:
        number:
          type: string
        activationDate:
          type: string
          format: date
        expirationDate:
          type: string
          format: date
        status:
          type: string
          enum:
            - ACTIVE
            - BLOCKED
            - EXPIRED
        balance:
          type: number
    BalanceResponseDto:
      type: object
      properties:
        balance:
          type: number
  securitySchemes:
    Bearer Authentication:
      type: http
      name: Authorization
      in: header
      scheme: bearer
      bearerFormat: JWT

